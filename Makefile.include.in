
ARCH ?= x86_64

ifeq ($(ARCH), arm)
  TOOLCHAIN := @arm_toolchain@
  CROSS_COMPILE ?= $(ARCH)-linux-
endif
ifeq ($(ARCH), mips)
  TOOLCHAIN := @mips_toolchain@
  CROSS_COMPILE ?= $(ARCH)-linux-
endif
ifeq ($(ARCH), mipsel)
  TOOLCHAIN := @mipsel_toolchain@
  CROSS_COMPILE ?= $(ARCH)-linux-
endif
ifeq ($(ARCH), x86_64)
  TOOLCHAIN :=
  CROSS_COMPILE ?=
endif

PATH := $(TOOLCHAIN):$(PATH)
CC    = $(CROSS_COMPILE)gcc
STRIP = $(CROSS_COMPILE)strip
AR    = $(CROSS_COMPILE)ar
LD    = $(CROSS_COMPILE)ld

SRCDIR              = src.$(ARCH)
DESTDIR             = @install_dir@/$(ARCH)
PREFIX              = /usr
LIBDIR              = $(DESTDIR)$(PREFIX)/lib
INCLUDEDIR          = $(DESTDIR)$(PREFIX)/include
TARBALLS_LOCATION   = @use_tarballs@
KERNEL_LOCATION    ?= @kernel_path@
ARCHIVE_TOOL        = @TAR@
ARCHIVE_TOOL_FLAGS  = --strip-components=1 -xf
RETRIEVE_TOOL       = @CURL@
RETRIEVE_TOOL_FLAGS = -Ls --create-dirs -f -O
GIT_TOOL            = @GIT@
GZIP_TOOL           = @GZIP@
CMAKE_TOOL          = @CMAKE@
CFLAGS              = -DNEED_PRINTF -I$(INCLUDEDIR)
LDFLAGS             = -L$(LIBDIR)
BUILDFLAGS          = $(CFLAGS) $(LDFLAGS)

APPLY_PATCH = for file in `ls ../patches/*.patch`; do \
	(patch -bp1 < $$file) \
	done

ifeq ($(JOBS),)
  JOBS := $(shell grep -c ^processor /proc/cpuinfo 2>/dev/null)
  ifeq ($(JOBS),)
    JOBS := 1
  endif
endif

export ARCH TOOLCHAIN CROSS_COMPILE PATH CFLAGS LDFLAGS \
       CC STRIP AR LD SRCDIR DESTDIR PREFIX \
       LIBDIR INCLUDEDIR BUILDFLAGS TARBALLS_LOCATION \
       ARCHIVE_TOOL ARCHIVE_TOOL_FLAGS RETRIEVE_TOOL \
       RETRIEVE_TOOL_FLAGS GIT_TOOL GZIP_TOOL CMAKE_TOOL

